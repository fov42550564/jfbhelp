1.vertext坐标和texture坐标的映射
vertext坐标表示的是形状，texture坐标表示的颜色分布，两个坐标重叠在一起，在渲染的时候就能把颜色画到物体上.
如:
(-1,1)[0,0]         (1,1)[1,0]
+---------------------------+
|                           |
|                           |
|                           |
|                           |
|                           |
|                           |
|                           |
|                           |
|                           |
|                           |
+---------------------------+
(-1,-1)[0,1]      (1,-1)[1,1]

说明：上图中小括号中的坐标是vertext坐标，方括号中的是texture坐标
下面来我们看yuv数据的y, u, v平面：
[0,0]        y          [1,0]   [0,0]  u  [1,0]    [0,0]  v  [1,0]
+---------------------------+   +------------+     +------------+
|                           |   |            |     |            |
|                           |   |            |     |            |
|                           |   |            |     |            |
|                           |   |            |     |            |
|                           |   +------------+     +------------+
|                           |   [0,1]     [1,1]    [0,1]     [1,1]
|                           |
|                           |
|                           |
|                           |
+---------------------------+
[0,1]              [1,1]

下面来我们看fragmentShader的代码
nx=vTextureCoord[0];
ny=vTextureCoord[1];
y=texture2D(Ytext, vec2(nx, ny)).r;
u=texture2D(Utext, vec2(nx, ny)).r;
v=texture2D(Vtext, vec2(nx, ny)).r;
.....
convert yuv to rgb
.....
gl_FragColor = vec4(r, g, b, 1.0);
让我们来分析一下这段代码：
当开始为（-1, 1）着色时，根据坐标映射，这时的textture坐标是[0,0],会利用texture2D去获取[0,0]点的yuv值，然后将它转化为rgb的值，再将rgb着色到(-1, 1)点.
再如当开始为（0, 0）点，形状的中心点着色时，根据坐标映射，这时的textture坐标是[0.5,0.5],会利用texture2D去获取[0.5,0.5]点的yuv值，然后将它转化为rgb的值，再将rgb着色到(0, 0)点.

那么纹理是怎么样产生的呢
1.glGenTextures(3, textureIds);
2.glActiveTexture(GL_TEXTURE0);
3.glBindTexture(GL_TEXTURE_2D, textureIds[0]);
4.glTexImage2D(GL_TEXTURE_2D, 0, GL_LUMINANCE, width, height, 0, GL_LUMINANCE, GL_UNSIGNED_BYTE, ybuf); 
....
2,3,4步是采用y_plane的数据为 GL_TEXTURE0 生成一个纹理，GL_TEXTURE0 对应的就是 fragmentShader 里面的yTex, 是怎么样对应上去的呢？


int textureId = glGetUniformLocation(_program, "Ytex"); //获取Ytex在 fragmentShader 中的Location
glUniform1i(textureId, 0);  //绑定Ytex到 GL_TEXTURE0


这样做到了将数据从opengl向shader中传递，在opengl中通过ybuf生成纹理，然后在fragmentShader中通过绑定的纹理中获取到纹理数据进行着色.











